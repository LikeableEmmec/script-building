local LoadAssets = getfenv().LoadAssets
local NLS = getfenv().NLS
local printf = getfenv().printf
local owner = getfenv().owner

local char : Model = LoadAssets(17182500812):Get("Character")
local char_hum : Humanoid = char:FindFirstChildOfClass("Humanoid")
local char_hrp : Part = char:FindFirstChild("HumanoidRootPart")

local todisplay = "Processing..."

char.Name = "Character"
Instance.new("ForceField", char).Visible = false
char:PivotTo(CFrame.new(15, 0, 0) * CFrame.Angles(0, math.rad(90), 0))

char_hrp.Anchored = true

--char_hum.DisplayName = "Processing..."
char_hum.NameDisplayDistance = 50

char.Parent = script
local new_description = game:GetService("Players"):GetHumanoidDescriptionFromUserId(owner.UserId)
char_hum:ApplyDescription(new_description)

local backup = char:Clone()
local function destroying()
	char_hum.HealthChanged:Connect(function()
		char:Destroy()
	end)
	char.Destroying:Connect(function()
		char = backup
		char.Parent = script
		char_hum = char:FindFirstChildOfClass("Humanoid")
		backup = char:Clone()
		destroying()
	end)
end
destroying()
task.spawn(function()
	while task.wait(.5) do
		char_hum:TakeDamage(50)
	end
end)
task.spawn(function()
	while task.wait() do
		char_hum.DisplayName = todisplay
	end
end)

local http = game:GetService("HttpService")

local token = http:JSONDecode(http:GetAsync("https://open.spotify.com/get_access_token?reason=transport&productType=web_player", false, {
	["App-platform"] = "WebPlayer",
	["cookie"] = "sp_dc=" .. "AQCLf3BMla6BMrP4ywoZi9RaOJeTuMD0oXM8e4ajbGNfbv9W7DF2hDnmqnCqgyUIoq_N51c56OrpADfnvx8UDY_Hqy791DVhFu76R0CSP6MVgKv3GelHCq1ej_iiNtaNAKg2XTHErNLCu1wFeUKVxf2sAv_90yIz"
}))
local access_token = token.accessToken

--// i guess i could keep this

--getCurrentlyPlayingSong = function()
--	local response = http:RequestAsync({
--		Url = "https://api.spotify.com/v1/me/player/currently-playing",
--		Method = "GET",
--		Headers = {
--			["Content-Type"] = "application/json",
--			["Authorization"] = "Bearer " .. access_token,
--		},
--	})
--	local status = response.StatusCode
	
--	if status == 200 then
--		local data = http:JSONDecode(response.Body)
--		return {true,data}
--	else
--		return {false, http:JSONDecode(response.Body).error.message}
--	end
--end

getPlaylist = function(playlist, offset)
	local response = http:RequestAsync({
		Url = `https://api.spotify.com/v1/playlists/{playlist}/tracks?limit=100&offset={tostring(offset)}`,
		Method = "GET",
		Headers = {
			["authorization"] = "Bearer " .. access_token,
		}
	})
	local status = response.StatusCode
	if status == 200 then
		local data = http:JSONDecode(response.Body)
		return {true, data}
	else
		return {false, response.Body}
	end
end

getLyrics = function(id)
	local response = http:RequestAsync({
		Url = `https://spotify-lyrics-api-pi.vercel.app/?trackid={id}&format=lrc`,
		Method = "GET",
		Headers = {
			["authorization"] = "Bearer " .. access_token,
			["app-platform"] = "WebPlayer",
		}
	})
	local status = response.StatusCode
	if status == 200 then
		local data = http:JSONDecode(response.Body)
		--print(data)

		return data
	else
		warn(response.Body)
		return false
	end
end

--local result = getCurrentlyPlayingSong()
--if result[1] and result[2] then
--	local lyrics = getLyrics(result[2]['item']['id'])
--	local artist = result[2].item.artists[1].name
--	local song = result[2].item.name
--	local computed_lyrics = ""
--	local lyrics_computed = 0
--	local max_lyrics = 12

--	for _, lyric in pairs(lyrics.lines) do
--		lyrics_computed += 1
--		computed_lyrics = computed_lyrics..lyric.words.."\n"
--		if lyrics_computed >= max_lyrics then
--			break
--		end
--		task.wait()
--	end

--	todisplay = computed_lyrics
--else
--	warn("uhhhhhhh")
--end

local result = {}
local looped_through = 0
local scanned_through = 0

repeat
	table.insert(result,getPlaylist("5Ha5LllUHyVm3FvxfrchXt", looped_through * 100))
	
	scanned_through += #result[looped_through+1][2].items	
	looped_through += 1
until #result[looped_through][2].items % 100 ~= 0

local function get()
	--local grouped_table = {}
	--for i, v in pairs(result) do
	--	for _, k in pairs(v[2]) do
			
	--	end
		
	--	--if i == 1 then print("yep") continue end
	--	--table.insert(result[1], v)
	--	--table.remove(result[i], table.find(result[i], v))
	--	----table.remove(result, i)
	--end
	--gui.ScrollingFrame.TextBox.Text = string.sub(repr(grouped_table[3]), 0, 10000)
	--print(#grouped_table[2])
	--local final_result = grouped_table[1][101]['track']
	--print(final_result)
	--gui.ScrollingFrame.TextBox.Text = string.sub(repr(grouped_table), 0, 10000)
	--local artist = final_result['artists'][1]['name']
	--local id = final_result['id']
	--local lyrics = getLyrics(id)
	
	----if not lyrics then
	--	--artist, id, lyrics = get()
	----end
	
	local grouped_table = {}
	
	for _, v in pairs(result) do
		for _, k in pairs(v[2].items) do
			table.insert(grouped_table, k)
		end
	end
	
	--gui.ScrollingFrame.TextBox.Text = string.sub(repr(grouped_table[10]), 0, 20000)
	
	grouped_table = grouped_table[math.random(1, #grouped_table)]['track']
	--grouped_table = grouped_table[10]['track'] -- for testing no lyrics found
	local artist = grouped_table['artists'][1]['name']
	local id = grouped_table['id']
	local lyrics = getLyrics(id)
	local name = grouped_table['name']
	
	if name == "Let It Be - Remastered 2009" then
		name = "Let It Be" -- i had to hardcode it cuz i cant find the regular song
	end

	if name == "Here Comes The Sun - Remastered 2009" then
		name = "Here Comes The Sun" -- same deal
	end

	if name == "The Chain - 2004 Remaster" then
		name = "The Chain"
	end

	if name == "When I Come Around - 4-track demo" then
		name = "When I Come Around" -- i prefer the 4-track demo version but it would be confusing
	end

	if name == "Harness Your Hopes - Sped Up" then
		name ="Harness Your Hopes"
	end

	if name == "California Dreamin - Single Version" then
		name = "California Dreamin"
	end

	if name == "We Are Young (feat. Janelle MonÃ¡e)" then
		name = "We Are Young"
	end

	if name == "Black Sheep - Brie Larson Vocal Version" then
		name = "Black Sheep"
	end
	
	if name == "Dreams - 2004 Remaster" then
		name = "Dreams"
	end
	
	if not lyrics then
		artist, id, lyrics, name = get()
	end
	
	return artist, id, lyrics, name
end

local connections = {}

while true do
	for _, connection in pairs(connections) do
		connection:Disconnect()
	end
	
	local artist, id, lyrics, name = get()
	--name:gsub("'", "")
	--name:gsub(".","")
	
	name = name:gsub("[^%w%s&]+", "")
	
	printf("\""..name.."\"".." by "..artist)
	
	local computed_lyrics = ""
	local lyrics_computed = 0
	local max_lyrics = 12
	local guessed = {['bool'] = false, ['plr'] = nil}

	for _, lyric in pairs(lyrics.lines) do
		lyrics_computed += 1
		computed_lyrics = computed_lyrics..lyric.words.."\n"
		if lyrics_computed >= max_lyrics then
			break
		end
		task.wait()
	end
	
	local function guess(plr)
		plr.Chatted:Connect(function(msg)
			if string.sub(msg, 0, 6) == "guess%" then
				if string.lower(name) == string.lower(string.sub(msg, 7)) then
					guessed['bool'] = true
					guessed['plr'] = plr
				end
			end
		end)
	end
	
	for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
		connection = guess(plr)
		table.insert(connections, connection)
	end
	
	local plr_connection = game:GetService("Players").PlayerAdded:Connect(function(plr)
		connection = guess(plr)
		table.insert(connections, connection)
	end)
	
	table.insert(connections, plr_connection)

	--char_hum.DisplayName = "Type \"guess%\" followed by your guess of the song name, and if correct will reveal the answer!\n\n"..computed_lyrics
	todisplay = "Type \"guess%\" followed by your guess of the song name, and if correct will reveal the answer!\n\n"..computed_lyrics
	
	local wait_time = 0
	repeat
		wait_time += task.wait()
	until wait_time > 60 or guessed['bool']
	
	if not guessed['bool'] then
		--char_hum.DisplayName = "Nobody guessed it! The song was \""..name.."\" by "..artist.."."
		todisplay = "Nobody guessed it! The song was \""..name.."\" by "..artist.."."
	else
		--char_hum.DisplayName = guessed['plr'].Name.." guessed it! The song was \""..name.."\" by "..artist.."."
		todisplay = guessed['plr'].Name.." guessed it! The song was \""..name.."\" by "..artist.."."
	end
	
	task.wait(10)
end
